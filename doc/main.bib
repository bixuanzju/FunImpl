%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/

%% Created for Linus Yang at 2015-06-26 11:14:58 +0800 


%% Saved with string encoding Unicode (UTF-8) 



@article{pts:normalize,
	Author = {Jutting, LSV},
	Date-Added = {2015-06-26 03:14:51 +0000},
	Date-Modified = {2015-06-26 03:14:58 +0000},
	Journal = {Information and Computation},
	Number = {1},
	Pages = {30--41},
	Publisher = {Elsevier},
	Title = {Typing in pure type systems},
	Volume = {105},
	Year = {1993}}

@inproceedings{handbook,
	Author = {Henk Barendregt},
	Booktitle = {Handbook of Logic in Computer Science},
	Date-Added = {2015-06-07 12:35:33 +0000},
	Date-Modified = {2015-06-07 12:37:42 +0000},
	Pages = {117--309},
	Publisher = {Oxford University Press},
	Title = {Lambda Calculi with Types},
	Volume = {2},
	Year = {1992}}

@incollection{dep:pisigma,
	Author = {Altenkirch, Thorsten and Danielsson, Nils Anders and L{\"o}h, Andres and Oury, Nicolas},
	Booktitle = {Functional and Logic Programming},
	Date-Added = {2015-05-03 19:37:24 +0000},
	Date-Modified = {2015-05-03 19:45:01 +0000},
	Pages = {40--55},
	Publisher = {Springer},
	Title = {{$\Pi$$\Sigma$: Dependent types without the sugar}},
	Year = {2010}}

@inproceedings{pts:rec,
	Author = {Severi, Paula G and de Vries, Fer-Jan J},
	Booktitle = {ACM SIGPLAN Notices},
	Date-Added = {2015-05-03 19:25:17 +0000},
	Date-Modified = {2015-05-03 19:25:34 +0000},
	Number = {9},
	Organization = {ACM},
	Pages = {141--152},
	Title = {Pure type systems with corecursion on streams: from finite to infinitary normalisation},
	Volume = {47},
	Year = {2012}}

@inproceedings{fc:kind,
	Author = {Weirich, Stephanie and Hsu, Justin and Eisenberg, Richard A},
	Booktitle = {Proceedings of the 18th ACM SIGPLAN International Conference on Functional Programming, ICFP},
	Date-Added = {2015-05-03 19:10:27 +0000},
	Date-Modified = {2015-05-03 19:42:15 +0000},
	Organization = {Citeseer},
	Title = {Towards dependently typed Haskell: System FC with kind equality},
	Volume = {13},
	Year = {2013}}

@book{adt:rec,
	Author = {Vanderwaart, Joseph C and Dreyer, Derek and Petersen, Leaf and Crary, Karl and Harper, Robert and Cheng, Perry},
	Date-Added = {2015-05-03 18:32:49 +0000},
	Date-Modified = {2015-05-03 19:42:01 +0000},
	Number = {3},
	Publisher = {ACM},
	Title = {Typed compilation of recursive datatypes},
	Volume = {38},
	Year = {2003}}

@article{zombie:popl14,
	Author = {Casinghino, Chris and Sj{\"o}berg, Vilhelm and Weirich, Stephanie},
	Date-Added = {2015-05-03 18:23:26 +0000},
	Date-Modified = {2015-05-03 19:26:04 +0000},
	Journal = {ACM SIGPLAN Notices},
	Number = {1},
	Pages = {33--45},
	Publisher = {ACM},
	Title = {Combining proofs and programs in a dependently typed language},
	Volume = {49},
	Year = {2014}}

@phdthesis{zombie:thesis,
	Author = {Vilhem Sj\"oberg},
	Coq = {papers/step_teqt.tar.gz},
	Date-Added = {2015-05-03 18:13:50 +0000},
	Date-Modified = {2015-05-03 19:26:09 +0000},
	Pdf = {papers/thesis.pdf},
	School = {University of Pennsylvania},
	Title = {A Dependently Typed Language with Nontermination},
	Year = {2015}}

@inproceedings{zombie:popl15,
	Acmid = {2676974},
	Address = {New York, NY, USA},
	Author = {Sj\"{o}berg, Vilhelm and Weirich, Stephanie},
	Booktitle = {Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	Date-Added = {2015-05-03 18:08:47 +0000},
	Date-Modified = {2015-05-03 19:26:12 +0000},
	Doi = {10.1145/2676726.2676974},
	Keywords = {congruence closure, dependent types},
	Location = {Mumbai, India},
	Numpages = {14},
	Pages = {369--382},
	Publisher = {ACM},
	Series = {POPL '15},
	Title = {Programming Up to Congruence},
	Year = {2015},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2676726.2676974},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2676726.2676974}}

@article{pts:fp,
	Author = {Roorda, J-W and Jeuring, JT},
	Date-Added = {2015-05-03 18:03:49 +0000},
	Date-Modified = {2015-05-03 19:25:39 +0000},
	Title = {Pure type systems for functional programming},
	Year = {2007}}

@article{fc:uhc,
	Author = {Middelkoop, Arie and Dijkstra, Atze and Swierstra, S Doaitse},
	Date-Added = {2015-05-03 18:01:37 +0000},
	Date-Modified = {2015-05-03 19:42:29 +0000},
	Journal = {Higher-Order and Symbolic Computation},
	Number = {2},
	Pages = {145--166},
	Publisher = {Springer},
	Title = {A lean specification for GADTs: system F with first-class equality proofs},
	Volume = {23},
	Year = {2010}}

@article{pts:henk,
	Author = {Jones, Simon Peyton and Meijer, Erik},
	Date-Added = {2015-05-03 18:00:03 +0000},
	Date-Modified = {2015-05-03 19:26:25 +0000},
	Title = {Henk: a typed intermediate language},
	Year = {1997}}

@inproceedings{fc,
	Author = {Sulzmann, Martin and Chakravarty, Manuel MT and Jones, Simon Peyton and Donnelly, Kevin},
	Booktitle = {Proceedings of the 2007 ACM SIGPLAN international workshop on Types in languages design and implementation},
	Date-Added = {2015-05-03 17:58:59 +0000},
	Date-Modified = {2015-05-03 19:42:22 +0000},
	Organization = {ACM},
	Pages = {53--66},
	Title = {System F with type equality coercions},
	Year = {2007}}

@inproceedings{fc:pro,
	Author = {Yorgey, Brent A and Weirich, Stephanie and Cretin, Julien and Peyton Jones, Simon and Vytiniotis, Dimitrios and Magalh{\~a}es, Jos{\'e} Pedro},
	Booktitle = {Proceedings of the 8th ACM SIGPLAN workshop on Types in language design and implementation},
	Date-Added = {2015-05-03 17:58:05 +0000},
	Date-Modified = {2015-05-03 19:42:25 +0000},
	Organization = {ACM},
	Pages = {53--66},
	Title = {Giving Haskell a promotion},
	Year = {2012}}

@article{coc,
	Acmid = {47725},
	Address = {Duluth, MN, USA},
	Author = {Coquand, Thierry and Huet, Gerard},
	Doi = {10.1016/0890-5401(88)90005-3},
	Issn = {0890-5401},
	Issue_Date = {February/March 1988},
	Journal = {Inf. Comput.},
	Month = feb,
	Number = {2-3},
	Numpages = {26},
	Pages = {95--120},
	Publisher = {Academic Press, Inc.},
	Title = {The Calculus of Constructions},
	Url = {http://dx.doi.org/10.1016/0890-5401(88)90005-3},
	Volume = {76},
	Year = {1988},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/0890-5401(88)90005-3}}

@phdthesis{coc:decidability,
	Author = {Coquand, Thierry},
	Title = {Une th{\'e}orie des constructions},
	Year = {1985}}

@inproceedings{Fegaras1996,
abstract = {Leonidas Fegaras No contact information provided yet. Bibliometrics: publication history Publication years1989-2010 Publication count36 Citation Count258 Available for download13 Downloads (6 Weeks)38 Downloads (12 Months)385 View colleagues of Leonidas Fegaras Tim Sheard No contact information provided yet. Bibliometrics: publication history Publication years1984-2010 Publication count70 Citation Count741 Available for download27 Downloads (6 Weeks)86 Downloads (12 Months)630 View colleagues of Tim Sheard},
author = {Fegaras, Leonidas and Sheard, Tim},
booktitle = {Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages - POPL '96},
doi = {10.1145/237721.237792},
isbn = {0897917693},
issn = {07308566},
pages = {284--294},
title = {{Revisiting catamorphisms over datatypes with embedded functions (or, programs from outer space)}},
url = {http://dl.acm.org/citation.cfm?id=237721.237792},
year = {1996}
}
@misc{Bohm1985,
abstract = {The notion of iteratively defined functions from and to heterogeneous term algebras is introduced as the solution of a finite set of equations of a special shape. Such a notion has remarkable consequences: (1) Choosing the second-order typed lamdda-calculus ($\Lambda$ for short) as a programming language enables one to represent algebra elements and iterative functions by automatic uniform synthesis paradigms, using neither conditional nor recursive constructs. (2) A completeness theorem for $\Lambda$-terms with type of degree at most two and a companion corollary for $\Lambda$-programs have been proved. (3) A new congruence relation for the last-mentioned $\Lambda$-terms which is stronger than $\Lambda$-convertibility is introduced and proved to have the meaning of a $\Lambda$-program equivalence. Moreover, an extension of the paradigms to the synthesis of functions of higher complexity is considered and exemplified. All the concepts are explained and motivated by examples over integers, list- and tree-structures.},
author = {B\"{o}hm, Corrado and Berarducci, Alessandro},
booktitle = {Theoretical Computer Science},
doi = {10.1016/0304-3975(85)90135-5},
issn = {03043975},
pages = {135--154},
title = {{Automatic synthesis of typed $\Lambda$-programs on term algebras}},
volume = {39},
year = {1985}
}
@article{fstar,
author = {Rastogi, Aseem and Delignat-lavaud, Antoine and Keller, Chantal and Strub, Pierre-yves and Bhargavan, Karthikeyan},
file = {:Users/jeremybi/Dropbox/papers/full.pdf:pdf},
pages = {1--19},
title = {{Semantic Purity and Effects Reunited in F}},
year = {2015}
}
@misc{Swamy2011,
abstract = {Distributed applications are difficult to program reliably and securely. Dependently typed functional languages promise to prevent broad classes of errors and vulnerabilities, and to enable program verification to proceed side-by-side with development. However, as recursion, effects, and rich libraries are added, using types to reason about programs, specifications, and proofs becomes challenging. We present F-star, a full-fledged design and implementation of a new dependently typed language for secure distributed programming. Unlike prior languages, F-star provides arbitrary recursion while maintaining a logically consistent core; it enables modular reasoning about state and other effects using affine types; and it supports proofs of refinement properties using a mixture of cryptographic evidence and logical proof terms. The key mechanism is a new kind system that tracks several sub-languages within F-star and controls their interaction. F-star subsumes two previous languages, F7 and Fine. We prove type soundness (with proofs mechanized in Coq) and logical consistency for F-star. We have implemented a compiler that translates F-star to NET bytecode, based on a prototype for Fine. F-star provides access to libraries for concurrency, networking, cryptography, and interoperability with C\#, F\#, and the other .NET languages. The compiler produces verifiable binaries with 60\% code size overhead for proofs and types, as much as a 45x improvement over the Fine compiler, while still enabling efficient bytecode verification. To date, we have programmed and verified more than 20,000 lines of F-star including (1) new schemes for multi-party sessions; (2) a zero-knowledge privacy-preserving payment protocol; (3) a provenance-aware curated database; (4) a suite of 17 web-browser extensions verified for authorization properties; and (5) a cloud-hosted multi-tier web application with a verified reference monitor.},
author = {Swamy, Nikhil and Chen, Juan and Fournet, C\'{e}dric and Strub, Pierre-Yves and Bhargavan, Karthikeyan and Yang, Jean},
booktitle = {ACM SIGPLAN Notices},
doi = {10.1145/2034574.2034811},
isbn = {9781450308656},
issn = {03621340},
number = {9},
pages = {266},
title = {{Secure distributed programming with value-dependent types}},
volume = {46},
year = {2011}
}
@article{coquand1986analysis,
  title={An analysis of Girard's paradox},
  author={Coquand, Thierry},
  year={1986}
}

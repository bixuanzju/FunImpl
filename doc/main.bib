%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/

%% Created for Linus Yang at 2015-06-26 11:14:58 +0800 


%% Saved with string encoding Unicode (UTF-8) 

@inproceedings{Reynolds:1974,
 author = {Reynolds, John C.},
 title = {Towards a Theory of Type Structure},
 booktitle = {Programming Symposium, Proceedings Colloque Sur La Programmation},
 year = {1974},
 pages = {408--423}
}

@inproceedings{Yorgey:2012,
 author = {Yorgey, Brent A. and Weirich, Stephanie and Cretin, Julien and Peyton Jones, Simon and Vytiniotis, Dimitrios and Magalh\~{a}es, Jos{\'e} Pedro},
 title = {Giving Haskell a Promotion},
 booktitle = {Proceedings of the 8th ACM SIGPLAN Workshop on Types in Language Design and Implementation},
 series = {TLDI '12},
 year = {2012}
} 


@inproceedings{Eisenberg:2014,
 author = {Eisenberg, Richard A. and Vytiniotis, Dimitrios and Peyton Jones, Simon and Weirich, Stephanie},
 title = {Closed Type Families with Overlapping Equations},
 booktitle = {Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '14},
 year = {2014},
} 
 

@article{pts:normalize,
	Author = {Jutting, LSV},
	Date-Added = {2015-06-26 03:14:51 +0000},
	Date-Modified = {2015-06-26 03:14:58 +0000},
	Journal = {Information and Computation},
	Number = {1},
	Pages = {30--41},
	Publisher = {Elsevier},
	Title = {Typing in pure type systems},
	Volume = {105},
	Year = {1993}}

@inproceedings{handbook,
	Author = {Henk Barendregt},
	Booktitle = {Handbook of Logic in Computer Science},
	Date-Added = {2015-06-07 12:35:33 +0000},
	Date-Modified = {2015-06-07 12:37:42 +0000},
	Pages = {117--309},
	Publisher = {Oxford University Press},
	Title = {Lambda Calculi with Types},
	Volume = {2},
	Year = {1992}}

@incollection{dep:pisigma,
	Author = {Altenkirch, Thorsten and Danielsson, Nils Anders and L{\"o}h, Andres and Oury, Nicolas},
	Booktitle = {Functional and Logic Programming},
	Date-Added = {2015-05-03 19:37:24 +0000},
	Date-Modified = {2015-05-03 19:45:01 +0000},
	Pages = {40--55},
	Publisher = {Springer},
	Title = {{$\Pi$$\Sigma$: Dependent types without the sugar}},
	Year = {2010}}

@inproceedings{pts:rec,
	Author = {Severi, Paula G and de Vries, Fer-Jan J},
	Booktitle = {ACM SIGPLAN Notices},
	Date-Added = {2015-05-03 19:25:17 +0000},
	Date-Modified = {2015-05-03 19:25:34 +0000},
	Number = {9},
	Organization = {ACM},
	Pages = {141--152},
	Title = {Pure type systems with corecursion on streams: from finite to infinitary normalisation},
	Volume = {47},
	Year = {2012}}

@inproceedings{fc:kind,
	Author = {Weirich, Stephanie and Hsu, Justin and Eisenberg, Richard A},
	Booktitle = {Proceedings of the 18th ACM SIGPLAN International Conference on Functional Programming, ICFP},
	Date-Added = {2015-05-03 19:10:27 +0000},
	Date-Modified = {2015-05-03 19:42:15 +0000},
	Organization = {Citeseer},
	Title = {Towards dependently typed Haskell: System FC with kind equality},
	Volume = {13},
	Year = {2013}}

@book{adt:rec,
	Author = {Vanderwaart, Joseph C and Dreyer, Derek and Petersen, Leaf and Crary, Karl and Harper, Robert and Cheng, Perry},
	Date-Added = {2015-05-03 18:32:49 +0000},
	Date-Modified = {2015-05-03 19:42:01 +0000},
	Number = {3},
	Publisher = {ACM},
	Title = {Typed compilation of recursive datatypes},
	Volume = {38},
	Year = {2003}}

@article{zombie:popl14,
	Author = {Casinghino, Chris and Sj{\"o}berg, Vilhelm and Weirich, Stephanie},
	Date-Added = {2015-05-03 18:23:26 +0000},
	Date-Modified = {2015-05-03 19:26:04 +0000},
	Journal = {ACM SIGPLAN Notices},
	Number = {1},
	Pages = {33--45},
	Publisher = {ACM},
	Title = {Combining proofs and programs in a dependently typed language},
	Volume = {49},
	Year = {2014}}

@phdthesis{zombie:thesis,
	Author = {Vilhem Sj\"oberg},
	Coq = {papers/step_teqt.tar.gz},
	Date-Added = {2015-05-03 18:13:50 +0000},
	Date-Modified = {2015-05-03 19:26:09 +0000},
	Pdf = {papers/thesis.pdf},
	School = {University of Pennsylvania},
	Title = {A Dependently Typed Language with Nontermination},
	Year = {2015}}

@inproceedings{zombie:popl15,
	Acmid = {2676974},
	Address = {New York, NY, USA},
	Author = {Sj\"{o}berg, Vilhelm and Weirich, Stephanie},
	Booktitle = {Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	Date-Added = {2015-05-03 18:08:47 +0000},
	Date-Modified = {2015-05-03 19:26:12 +0000},
	Doi = {10.1145/2676726.2676974},
	Keywords = {congruence closure, dependent types},
	Location = {Mumbai, India},
	Numpages = {14},
	Pages = {369--382},
	Publisher = {ACM},
	Series = {POPL '15},
	Title = {Programming Up to Congruence},
	Year = {2015}}
        
@article{pts:fp,
	Author = {Roorda, J-W and Jeuring, JT},
	Date-Added = {2015-05-03 18:03:49 +0000},
	Date-Modified = {2015-05-03 19:25:39 +0000},
	Title = {Pure type systems for functional programming},
	Year = {2007}}

@article{fc:uhc,
	Author = {Middelkoop, Arie and Dijkstra, Atze and Swierstra, S Doaitse},
	Date-Added = {2015-05-03 18:01:37 +0000},
	Date-Modified = {2015-05-03 19:42:29 +0000},
	Journal = {Higher-Order and Symbolic Computation},
	Number = {2},
	Pages = {145--166},
	Publisher = {Springer},
	Title = {A lean specification for GADTs: system F with first-class equality proofs},
	Volume = {23},
	Year = {2010}}

@article{pts:henk,
	Author = {Jones, Simon Peyton and Meijer, Erik},
	Date-Added = {2015-05-03 18:00:03 +0000},
	Date-Modified = {2015-05-03 19:26:25 +0000},
	Title = {Henk: a typed intermediate language},
	Year = {1997}}

@inproceedings{fc,
	Author = {Sulzmann, Martin and Chakravarty, Manuel MT and Jones, Simon Peyton and Donnelly, Kevin},
	Booktitle = {Proceedings of the 2007 ACM SIGPLAN international workshop on Types in languages design and implementation},
	Date-Added = {2015-05-03 17:58:59 +0000},
	Date-Modified = {2015-05-03 19:42:22 +0000},
	Organization = {ACM},
	Pages = {53--66},
	Title = {System F with type equality coercions},
	Year = {2007}}

@inproceedings{fc:pro,
	Author = {Yorgey, Brent A and Weirich, Stephanie and Cretin, Julien and Peyton Jones, Simon and Vytiniotis, Dimitrios and Magalh{\~a}es, Jos{\'e} Pedro},
	Booktitle = {Proceedings of the 8th ACM SIGPLAN workshop on Types in language design and implementation},
	Date-Added = {2015-05-03 17:58:05 +0000},
	Date-Modified = {2015-05-03 19:42:25 +0000},
	Organization = {ACM},
	Pages = {53--66},
	Title = {Giving Haskell a promotion},
	Year = {2012}}

@article{coc,
	Acmid = {47725},
	Address = {Duluth, MN, USA},
	Author = {Coquand, Thierry and Huet, Gerard},
	Doi = {10.1016/0890-5401(88)90005-3},
	Issn = {0890-5401},
	Issue_Date = {February/March 1988},
	Journal = {Inf. Comput.},
	Month = feb,
	Number = {2-3},
	Numpages = {26},
	Pages = {95--120},
	Publisher = {Academic Press, Inc.},
	Title = {The Calculus of Constructions},
	Volume = {76},
	Year = {1988}}

@phdthesis{coc:decidability,
	Author = {Coquand, Thierry},
	Title = {Une th{\'e}orie des constructions},
	Year = {1985}}

@inproceedings{Fegaras1996,
abstract = {Leonidas Fegaras No contact information provided yet. Bibliometrics: publication history Publication years1989-2010 Publication count36 Citation Count258 Available for download13 Downloads (6 Weeks)38 Downloads (12 Months)385 View colleagues of Leonidas Fegaras Tim Sheard No contact information provided yet. Bibliometrics: publication history Publication years1984-2010 Publication count70 Citation Count741 Available for download27 Downloads (6 Weeks)86 Downloads (12 Months)630 View colleagues of Tim Sheard},
author = {Fegaras, Leonidas and Sheard, Tim},
booktitle = {Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages - POPL '96},
doi = {10.1145/237721.237792},
isbn = {0897917693},
issn = {07308566},
pages = {284--294},
title = {{Revisiting catamorphisms over datatypes with embedded functions (or, programs from outer space)}},
year = {1996}
}
@misc{Bohm1985,
abstract = {The notion of iteratively defined functions from and to heterogeneous term algebras is introduced as the solution of a finite set of equations of a special shape. Such a notion has remarkable consequences: (1) Choosing the second-order typed lamdda-calculus ($\Lambda$ for short) as a programming language enables one to represent algebra elements and iterative functions by automatic uniform synthesis paradigms, using neither conditional nor recursive constructs. (2) A completeness theorem for $\Lambda$-terms with type of degree at most two and a companion corollary for $\Lambda$-programs have been proved. (3) A new congruence relation for the last-mentioned $\Lambda$-terms which is stronger than $\Lambda$-convertibility is introduced and proved to have the meaning of a $\Lambda$-program equivalence. Moreover, an extension of the paradigms to the synthesis of functions of higher complexity is considered and exemplified. All the concepts are explained and motivated by examples over integers, list- and tree-structures.},
author = {B\"{o}hm, Corrado and Berarducci, Alessandro},
booktitle = {Theoretical Computer Science},
doi = {10.1016/0304-3975(85)90135-5},
issn = {03043975},
pages = {135--154},
title = {{Automatic synthesis of typed $\Lambda$-programs on term algebras}},
volume = {39},
year = {1985}
}
@article{fstar,
author = {Rastogi, Aseem and Delignat-lavaud, Antoine and Keller, Chantal and Strub, Pierre-yves and Bhargavan, Karthikeyan},
file = {:Users/jeremybi/Dropbox/papers/full.pdf:pdf},
pages = {1--19},
title = {{Semantic Purity and Effects Reunited in F}},
year = {2015}
}
@misc{Swamy2011,
abstract = {Distributed applications are difficult to program reliably and securely. Dependently typed functional languages promise to prevent broad classes of errors and vulnerabilities, and to enable program verification to proceed side-by-side with development. However, as recursion, effects, and rich libraries are added, using types to reason about programs, specifications, and proofs becomes challenging. We present F-star, a full-fledged design and implementation of a new dependently typed language for secure distributed programming. Unlike prior languages, F-star provides arbitrary recursion while maintaining a logically consistent core; it enables modular reasoning about state and other effects using affine types; and it supports proofs of refinement properties using a mixture of cryptographic evidence and logical proof terms. The key mechanism is a new kind system that tracks several sub-languages within F-star and controls their interaction. F-star subsumes two previous languages, F7 and Fine. We prove type soundness (with proofs mechanized in Coq) and logical consistency for F-star. We have implemented a compiler that translates F-star to NET bytecode, based on a prototype for Fine. F-star provides access to libraries for concurrency, networking, cryptography, and interoperability with C\#, F\#, and the other .NET languages. The compiler produces verifiable binaries with 60\% code size overhead for proofs and types, as much as a 45x improvement over the Fine compiler, while still enabling efficient bytecode verification. To date, we have programmed and verified more than 20,000 lines of F-star including (1) new schemes for multi-party sessions; (2) a zero-knowledge privacy-preserving payment protocol; (3) a provenance-aware curated database; (4) a suite of 17 web-browser extensions verified for authorization properties; and (5) a cloud-hosted multi-tier web application with a verified reference monitor.},
author = {Swamy, Nikhil and Chen, Juan and Fournet, C\'{e}dric and Strub, Pierre-Yves and Bhargavan, Karthikeyan and Yang, Jean},
booktitle = {ACM SIGPLAN Notices},
doi = {10.1145/2034574.2034811},
isbn = {9781450308656},
issn = {03621340},
number = {9},
pages = {266},
title = {{Secure distributed programming with value-dependent types}},
volume = {46},
year = {2011}
}
@article{coquand1986analysis,
  title={An analysis of Girard's paradox},
  author={Coquand, Thierry},
  year={1986}
}
@article{Meijer1991,
abstract = {We develop a calculus for lazy functional programming based on recursion operators associated wit data type definitions. For these operators we derive various algebraic laws that are useful in deriving and manipulating programs. We shall show that all example functions in Bird and Walder's "Introduction to Functional Programming" can be expressed using these operators.},
author = {Meijer, Erik and Fokkinga, Maarten and Paterson, Ross},
doi = {10.1007/3540543961\_7},
isbn = {0387543961},
journal = {Functional Programming Languages and Computer Architecture},
pages = {124--144},
title = {{Functional programming with bananas, lenses, envelopes and barbed wire}},
year = {1991}
}
@article{systemfw,
  title={Interpr{\'e}tation fonctionelle et {\'e}limination des coupures de l’arithm{\'e}tique d’ordre sup{\'e}rieur},
  author={Girard, Jean-Yves},
  year={1972},
  publisher={PhD thesis, Universit{\'e} Paris VII}
}
@article{nesteddt,
abstract = {A nested datatype, also known as a non-regular datatype, is a parametrised datatype whose declaration involves different instances of the accompanying type parameters. Nested datatypes have been mostly ignored in functional programming until recently, but they are turning out to be both theoretically important and useful in practice. The aim of this paper is to suggest a functorial semantics for such datatypes, with an associated calculational theory that mirrors and extends the standard theory for regular datatypes. Though elegant and generic, the proposed approach appears more limited than one would like, and some of the limitations are discussed.},
author = {Bird, Richard and Meertens, Lambert},
doi = {10.1007/BFb0054285},
file = {:Users/jeremybi/Dropbox/papers/BirdMeertens98Nested.pdf:pdf},
journal = {Mathematics of program construction},
pages = {52--67},
title = {{Nested datatypes}},
volume = {1422},
year = {1998}
}
@book{tapl,
  title={Types and programming languages},
  author={Pierce, Benjamin C},
  year={2002},
  publisher={MIT press}
}
@article{gadts,
author = {Mandelbaum, Y and Stump, a},
file = {:Users/jeremybi/Dropbox/papers/icfp09.pdf:pdf},
journal = {Workshop on ML},
title = {{GADTs for the OCaml masses}},
year = {2009}
}
@article{pts,
abstract = {Page 1. Journal of Functional Programming 1 (2): 125-154, April 1991 to HENK BARENDREGT Catholic University Nijmegen, The},
author = {Barendregt, HP and Barendregt, HP},
doi = {10.1017/S0956796800000022},
journal = {Journal of functional programming},
pages = {124},
title = {{Introduction to generalized type systems}},
volume = {1},
year = {1991}
}
@article{cic,
abstract = {We define the notion of an inductively defined type in the Calculus of Constructions and show how inductively defined types can be represented by closed types. We show that all primitive recursive functionals over these inductively defined types are also representable. This generalizes work by B\"{o}hm \& Berarducci on synthesis of functions on term algebras in the second-order polymorphic $\lambda$-calculus (F2). We give several applications of this generalization, including a representation of F2-programs in F3, along with a definition of functions reify, reflect, and eval for F2 in F3. We also show how to define induction over inductively defined types and sketch some results that show that the extension of the Calculus of Construction by induction principles does not alter the set of functions in its computational fragment, F$\omega$. This is because a proof by induction can be realized by primitive recursion, which is already definable in F$\omega$. 1},
author = {Pfenning, F and Paulin-Mohring, C},
doi = {10.1007/BFb0040259},
file = {:Users/jeremybi/Dropbox/papers/coc.pdf:pdf},
isbn = {978-0-387-97375-3},
journal = {Mathematical Foundations of Programming Semantics},
pages = {209--228},
title = {{Inductively defined types in the Calculus of Constructions}},
year = {1990}
}
@article{ott,
abstract = {Observational Type Theory (OTT) combines beneficial aspects of Intensional and Extensional Type Theory (ITT/ETT). It separates definitional equality, decidable as in ITT, and a substitutive propositional equality, capturing extensional equality of functions, as in ETT. Moreover, canonicity holds: any closed term is definitionally reducible to a canonical value. Building on previous work by each author, this article reports substantial progress in the form of a simplified theory with a straightforward syntactic presentation, which we have implemented. As well as simplifying reasoning about functions, OTT offers potential foundational benefits, e.g. it gives rise to a closed type theory encoding inductive datatypes.},
author = {Altenkirch, Thorsten and McBride, Conor},
journal = {Manuscript available online},
title = {{Towards Observational Type Theory}},
year = {2006}
}
@misc{encoding:scott,
abstract = {We start by giving a compact representation schema for $\lambda$-terms, and show how this leads to an exceedingly small and elegant self-interpreter. We then define the notion of a self-reducer, and show how this too can be written as a small $\lambda$-term. Both the self-interpreter and the self-reducer are proved correct. We finally give a constructive proof for the second fixed point theorem for the representation schema. All the constructions have been implemented on a computer, and experiments verify their correctness. Timings show that the self-interpreter and self-reducer are quite efficient, being about 35 and 50 times slower than direct execution using a call-by-need reductions strategy},
author = {Mogensen, Torben \AE.},
booktitle = {Journal of Functional Programming},
doi = {10.1017/S0956796800000423},
issn = {0956-7968},
number = {03},
pages = {345},
title = {{Efficient self-interpretation in lambda calculus}},
volume = {2},
year = {1992}
}
@article{elim:pi:pattern,
abstract = {This paper gives a reduction-preserving translation from Coquand’s dependent pattern matching into a traditional type theory with universes, inductive types and relations and the axiom K. This translation serves as a proof of termination for structurally recur- sive pattern matching programs, provides an implementable compilation technique in the style of functional programming languages, and demon- strates the equivalence with a more easily understood type theory.},
author = {Goguen, Healfdene and McBride, Conor and McKinna, James},
doi = {10.1.1.101.7522},
file = {:Users/jeremybi/Dropbox/papers/goguen.pdf:pdf},
isbn = {978-3-540-35462-8},
issn = {03029743},
journal = {of Lecture Notes in Computer Science},
pages = {521--540},
title = {{Eliminating dependent pattern matching}},
year = {2006}
}
@book{Luo:UTT,
 author = {Luo, Zhaohui},
 title = {Computation and Reasoning: A Type Theory for Computer Science},
 year = {1994},
 isbn = {0-19-853835-9},
 publisher = {Oxford University Press, Inc.},
 address = {New York, NY, USA},
}
@book{axiomK,
  title={Investigations into intensional type theory},
  author={Streicher, Thomas},
  year={1993}
}
@book{eqi:iso,
  title={What is a recursive module?},
  author={Crary, Karl and Harper, Robert and Puri, Sidd},
  volume={34},
  number={5},
  year={1999},
  publisher={ACM}
}
@inproceedings{hoas,
  title={Higher-order abstract syntax},
  author={Pfenning, Frank and Elliot, Conal},
  booktitle={ACM SIGPLAN Notices},
  volume={23},
  number={7},
  pages={199--208},
  year={1988},
  organization={ACM}
}
@article{datatype,
  title={Data types {\`a} la carte},
  author={Swierstra, Wouter},
  journal={Journal of functional programming},
  volume={18},
  number={04},
  pages={423--436},
  year={2008},
  publisher={Cambridge Univ Press}
}
@article{Keuchel2013,
author = {Keuchel, Steven and Schrijvers, Tom},
journal = {Proceedings of the 9th ACM SIGPLAN workshop on Generic programming - WGP '13},
keywords = {Datatype-generic programming,Fixed points,Mechanized meta-theory,Modularity},
pages = {13},
title = {{Generic datatypes \`{a} la carte}},
year = {2013}
}

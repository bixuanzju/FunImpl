data Nat = Zero | Succ Nat; let Vec : * -> Nat -> * = mu t : * -> Nat -> * . \a : * . \m : Nat . (b : * -> Nat -> *) -> b a Zero -> ((n : Nat) -> a -> t a n -> b a (Succ n)) -> b a m in let Nil : * -> (Vec a Zero) = \a : * . fold 3 [Vec a Zero] (\b : * -> Nat -> * . \nil : (b a Zero) . \cons :((n : Nat) -> a -> Vec a n -> b a (Succ n)) . nil) in let Cons : (a : *) -> (n : Nat) -> a -> (Vec a n) = \a : * . \n : Nat . \x : a . \xs : (Vec a n) . fold 3 [Vec a (Succ n)] (\b : * -> Nat -> * . \nil : (b a Zero) . \cons :((n : Nat) -> a -> Vec a n -> b a (Succ n)) . cons n x xs) in unfold 3 (Cons nat (Succ Zero) 2 (Cons nat Zero 1 (Nil nat)))

data Nat = Zero | Succ Nat; let Vec : * -> Nat -> * = mu t : * -> Nat -> * . \a : * . \m : Nat . (b : * -> Nat -> *) -> b a Zero -> ((n : Nat) -> a -> t a n -> b a (Succ n)) -> b a m in Vec nat (Succ (Succ Zero))

-- Pretty version
data Nat = Zero | Succ Nat; 
let Vec : * -> Nat -> * = 
    mu t : * -> Nat -> * . \a : * . \m : Nat . (b : * -> Nat -> *) -> 
    b a Zero -> 
    ((n : Nat) -> a -> t a n -> b a (Succ n)) -> 
    b a m 
in 
let Nil : * -> (Vec a Zero) = 
    \a : * . 
    fold 3 [Vec a Zero] (\b : * -> Nat -> * . 
    \nil : (b a Zero) . 
    \cons :((n : Nat) -> a -> Vec a n -> b a (Succ n)) . nil) 
in
let Cons : (a : *) -> (n : Nat) -> a -> (Vec a n) = 
    \a : * . \n : Nat . \x : a . \xs : (Vec a n) . 
    fold 3 [Vec a (Succ n)] (\b : * -> Nat -> * . 
    \nil : (b a Zero) . 
    \cons :((n : Nat) -> a -> Vec a n -> b a (Succ n)) . cons n x xs)
in 
Cons nat (Succ Zero) 2 (Cons nat Zero 1 (Nil nat))

-- Will have the type: Vec nat (Succ (Succ Zero))

-- Failed encoding `append` :(
data Nat = Zero | Succ Nat; let Vec : * -> Nat -> * = mu t : * -> Nat -> * . \a : * . \m : Nat . (b : * -> Nat -> *) -> b a Zero -> ((n : Nat) -> a -> t a n -> b a (Succ n)) -> b a m in let Nil : * -> (Vec a Zero) = \a : * . fold 3 [Vec a Zero] (\b : * -> Nat -> * . \nil : (b a Zero) . \cons :((n : Nat) -> a -> Vec a n -> b a (Succ n)) . nil) in let Cons : (a : *) -> (n : Nat) -> a -> (Vec a n) = \a : * . \n : Nat . \x : a . \xs : (Vec a n) . fold 3 [Vec a (Succ n)] (\b : * -> Nat -> * . \nil : (b a Zero) . \cons :((n : Nat) -> a -> Vec a n -> b a (Succ n)) . cons n x xs) in let plus : Nat -> Nat -> Nat = mu p : Nat -> Nat -> Nat . \a : Nat . \b : Nat . case a of Zero => b | Succ (n : Nat) => Succ (p n b) in let append : (a : *) -> (m : Nat) -> (n : Nat) -> (Vec a m) -> (Vec a n) -> (Vec a (plus m n)) = mu f : (a : *) -> (m : Nat) -> (n : Nat) -> (Vec a m) -> (Vec a n) -> (Vec a (plus m n)) . \a : * . \m : Nat . \n : Nat . \l : (Vec a m) . \t : (Vec a n) . (unfold 3 l) (\a : * . \n' : Nat . Vec a (plus n' n)) t (\r : Nat . \x : a . \y : Vec a r . Cons a (plus r n) x (f a r n y t)) in append

data Nat = Zero | Succ Nat; let ntoi: Nat -> nat = mu f : Nat -> nat . \a : Nat . case a of Zero => 0 | Succ (n : Nat) => 1 + f n in ntoi (Succ (Succ Zero))
